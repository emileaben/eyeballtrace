#!/usr/bin/env python
import argparse
import urllib2
import json
import random
import sys
import os
import time
import socket
import re
sys.path.insert(0, "%s/lib" % ( os.path.dirname(os.path.realpath(__file__) ) ) )
from Atlas import MeasurementPrint
from Atlas import ProbeInfo
from Atlas import Measure
from random import shuffle
from socketIO_client import SocketIO

def subselect_best_probes( probe_selection, count=3 ):
   ## TODO better probe selection (longest connected, geo-diversity?)
   plist = probe_selection.keys()
   random.shuffle( plist )
   return plist[0: count]

def select_probes_for_asn( asn, cc, af=4, count=3):
   ## select connected probes, returns list of probe IDs
   if af == 4:
      pinf = ProbeInfo.query( country_code=cc, asn_v4=asn, status=1, tags='system-ipv4-works,system-resolves-a-correctly' )
   elif af == 6:
      pinf = ProbeInfo.query( country_code=cc, asn_v6=asn, status=1, tags='system-ipv6-works,system-resolves-aaaa-correctly' )
   else:
      raise Exception("Invalid address family")
   if len( pinf ) == 0:
      #print "No probes for AS%s" % asn
      return []
   elif len( pinf ) < count:
      #print "low probecount for AS%s" % asn
      return pinf.keys()
   else:   
      return subselect_best_probes( pinf, count=count )

   #print "%s %s" % ( asn, len( pinf ) )
   #for p in pinf:
   #   print "%s %s" % ( count, pinf[p] )

def select_probes_based_on_market( args ):
   ## select 
   ### fetch data from APNIC for the specified economy
   all_probes = []
   prb2as={}
   # t= cummulatitive threshold: ie. at which point do you cross this pct of the total market
   # m= indidivual threshold: ie. minimum contribution size for individual ASNs, ie. m=1 => shows only players with >1% market share
   #APNIC_ECON_URL="http://data.labs.apnic.net/ipv6-measurement/Economies/%s/%s.asns.json?t=95" % ( args.country, args.country )
   APNIC_ECON_URL="http://data.labs.apnic.net/ipv6-measurement/Economies/%s/%s.asns.json?m=1" % ( args.country, args.country )
   try:
      req = urllib2.Request( APNIC_ECON_URL )
      conn = urllib2.urlopen( req ) 
      econdata = json.load( conn )
   except:
      print "data URL unavailable, exiting (URL:%s)" % APNIC_ECON_URL
   for asndata in econdata:
      probes = select_probes_for_asn( asndata['as'], args.country, af=4 )
      all_probes += probes
      for p in probes:
         prb2as[ p ] = asndata
      asndata['probes'] = probes
      del( asndata['v6preferred'] )
      del( asndata['v6capable'] )
      del( asndata['cc'] )
      del( asndata['samples'] )
   return all_probes, econdata, prb2as

def _exit( msm_id ):
   print "\nopenipmap_url: https://marmot.ripe.net/openipmap/tracemap?msm_ids=%s&show_suggestions=0" % ( msm_id )
   sys.exit(0)

def doit( args ):
   probe_selection,econdata,prb2as = select_probes_based_on_market( args )
   msm_id = Measure.oneofftrace(probe_selection, args.dest, af=4, paris=1, description="eyeballtrace cc:%s dst:%s" % ( args.country, args.dest ) )
   #print econdata
   #print probe_selection
   #print "openipmap_url: https://marmot.ripe.net/openipmap/tracemap?msm_ids=%s&show_suggestions=0" % ( msm_id )
   print "Please wait, while RIPE Atlas performs traceroutes to: %s\n\n" % ( args.dest )
   done = {
      'econ': econdata,
   }
   '''
   [{u'cumulative': 21.514498267801358, u'percent': 21.514498267801358, u'autnum': u'NET', u'as': 28573, u'as-descr': u'Servios de Comunicao S.A.', 'probes': [16544, 20768, 12811]}, {u'cumulative': 38.68036448052524, u'percent': 17.165866212723888, u'autnum': u'Global', u'as': 18881, u'as-descr': u'Village Telecom', 'probes': [19424, 16548, 13718]}, {u'cumulative': 50.96271455591548, u'percent': 12.282350075390243, u'autnum': u'Telemar', u'as': 7738, u'as-descr': u'Norte Leste S.A.', 'probes': [15800]}, {u'cumulative': 61.32838625234863, u'percent': 10.365671696433148, u'autnum': u'TELEFNICA', u'as': 27699, u'as-descr': u'BRASIL S.A', 'probes': [389, 1190]}, {u'cumulative': 69.93775014371738, u'percent': 8.609363891368758, u'autnum': u'Brasil', u'as': 8167, u'as-descr': u'Telecom SA - Filial Distrito Federal', 'probes': [19235, 16381]}, {u'cumulative': 71.86417933930537, u'percent': 1.9264291955879875, u'autnum': u'Brasil', u'as': 13591, u'as-descr': u'Telecom Comunicao Multimidia', 'probes': []}, {u'cumulative': 73.65293629055718, u'percent': 1.7887569512518102, u'autnum': u'TELEFNICA', u'as': 26599, u'as-descr': u'BRASIL S.A', 'probes': [132]}, {u'cumulative': 75.0630186706708, u'percent': 1.4100823801136202, u'autnum': u'ALGAR', u'as': 53006, u'as-descr': u'TELECOM SA', 'probes': []}]
   '''
   ### if head-end of econdata asns doesn't have probes, we should display that
   while len( done['econ'] ) > 0:
      head_end = done['econ'][0]
      head_end_probes = len( head_end['probes'] ) 
      if head_end_probes == 0:
         print "## AS%s/%s - %s (%.1f%% of market in %s)" % ( head_end['as'], head_end['autnum'], head_end['as-descr'], head_end['percent'], args.country )
         print "NO RIPE Atlas coverage!!" 
         print "If you are in a position to put a probe in this network: https://atlas.ripe.net/get-involved/become-a-host/"
         print
         done['econ'].pop(0)
      else:
         break
   if len( done['econ'] ) == 0:
      _exit( msm_id )
   def toprint( r ):
      prb_id = r['prb_id']
      # now find the AS
      asn = prb2as[ prb_id ]['as']
      asname= "%s - %s" % ( prb2as[ prb_id ]['autnum'], prb2as[ prb_id ]['as-descr'] )
      percent= prb2as[ prb_id ]['percent']
      trace_txt = "## AS%s/%s (%.1f%% of market in %s)\n%s\n\n" % ( 
         asn, asname, percent, args.country,
         MeasurementPrint.trace2txt( r, header="#prb:%s dst:%s\n" % ( prb_id, r['dst_name'] ) )
      )
      return trace_txt
      
   def on_result( r ):
      if 1: #try:
         # below is logic to display the trace_txts in order of market share
         prb_id = r['prb_id']
         # now find the AS
         asn = prb2as[ prb_id ]['as']
         if asn == done['econ'][0]['as']:
            print toprint( r )
            done['econ'].pop(0) 
            # this AS is done now, now see if we have raw tracetext cached for the next in line
            while len( done['econ'] ) > 0:
               head_end = done['econ'][0]
               head_end_probes = len( head_end['probes'] ) 
               if head_end_probes == 0:
                  print "## AS%s/%s - %s (%.1f%% of market in %s)" % ( head_end['as'], head_end['autnum'], head_end['as-descr'], head_end['percent'], args.country )
                  print "NO RIPE Atlas coverage!!" 
                  print "If you are in a position to put a probe in this network: https://atlas.ripe.net/get-involved/become-a-host/"
                  print
                  done['econ'].pop(0)
               elif 'rawtrace' in head_end:
                  print toprint( head_end['rawtrace'] )
                  done['econ'].pop(0)
               else:
                  break
         else:
            ## cache it for later
            for econasn in done['econ']:
               if asn == econasn['as']:
                  econasn['rawtrace'] = r
      if 0: #except:
         print "something went wrong on this input: %s" % r
      if len( done['econ'] ) == 0:
         _exit( msm_id )

   s = SocketIO('atlas-stream.ripe.net/stream/socket.io', 80)
   s.emit("atlas_subscribe", {'stream_type': 'result', 'msm': msm_id });
   s.on("atlas_result", on_result)
   s.wait(seconds=300)
   print "not all results are in, but exiting after 5mins"
   _exit( msm_id )

if __name__ == "__main__":
   parser = argparse.ArgumentParser()
   parser.add_argument('-c','--country', help="select probes from this country-code (2letter ISO)")
   #parser.add_argument('-f','--address-family', help="measure on IPv4 or IPv6") #TODO implement!
   parser.add_argument('dest', help="Destination")
   args = parser.parse_args()
   args.country = args.country.upper()
   doit( args )
